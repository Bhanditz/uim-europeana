<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>eu.europeana</groupId>
        <artifactId>europeana-uim</artifactId>
        <version>1.2.0-SNAPSHOT</version>
    </parent>

    <artifactId>europeana-uim-gui-gwt</artifactId>
    <packaging>war</packaging>
    <name>Unified Ingestion Manager: GWT User Interface</name>

    <properties>
        <gwtVersion>2.1.0</gwtVersion>
        <webappDirectory>${project.build.directory}/${project.build.finalName}</webappDirectory>
    </properties>

    <build>
        <!-- Generate compiled stuff in the folder used for developing mode -->
        <outputDirectory>${webappDirectory}/WEB-INF/classes</outputDirectory>

        <plugins>

            <!-- GWT Maven Plugin -->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>gwt-maven-plugin</artifactId>
                <version>2.1.0-1</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>compile</goal>
                            <goal>test</goal>
                            <goal>i18n</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <runTarget>Application.html</runTarget>
                    <hostedWebapp>${webappDirectory}</hostedWebapp>
                    <i18nMessagesBundle>eu.europeana.uim.gui.gwt.client.Messages</i18nMessagesBundle>

                    <!-- Additional configuration to be able to run the development mode against the webapp
                         deployed on the OSGI platform -->
                    <port>8181</port>
                    <noServer>true</noServer>
                    <runTarget>gui/Application.html</runTarget>
                    <!-- custom argument to tell the AbstractOSGIRemoteServiceServlet that it can trust
                         this environment -->
                    <!-- note the whitespace, I suppose this is due to the maven-gwt-plugin already providing some
                    additional VM arguments -->
                    <extraJvmArgs> -Ddevmode=true </extraJvmArgs>
                </configuration>
            </plugin>

            <!-- Copy static web files before executing gwt:run -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-war-plugin</artifactId>
                <version>2.1.1</version>
                <executions>
                    <execution>
                        <phase>compile</phase>
                        <goals>
                            <goal>exploded</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <webappDirectory>${webappDirectory}</webappDirectory>
                    <archive>
                        <!-- add the generated manifest to the war -->
                        <manifestFile>${project.build.outputDirectory}/META-INF/MANIFEST.MF</manifestFile>
                    </archive>
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.apache.felix</groupId>
                <artifactId>maven-bundle-plugin</artifactId>
                <version>2.1.0</version>
                <extensions>true</extensions>
                <executions>
                    <execution>
                        <id>bundle-manifest</id>
                        <phase>process-classes</phase>
                        <goals>
                            <goal>manifest</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <supportedProjectTypes>
                        <supportedProjectType>jar</supportedProjectType>
                        <supportedProjectType>bundle</supportedProjectType>
                        <supportedProjectType>war</supportedProjectType>
                    </supportedProjectTypes>
                    <instructions>
                        <Bundle-ClassPath>.,WEB-INF/classes</Bundle-ClassPath>
                        <Bundle-Activator>eu.europeana.uim.gui.gwt.server.UIMDependenciesActivator</Bundle-Activator>
                        <Embed-Directory>WEB-INF/lib</Embed-Directory>
                        <Embed-Dependency>
                            *;scope=compile|runtime|system
                        </Embed-Dependency>
                        <Embed-Transitive>true</Embed-Transitive>
                        <Import-Package>
                            *;resolution:=optional,
                            javax.servlet,
                            javax.servlet.http
                        </Import-Package>

                        <!-- OSGi spec config option -->
                        <Web-ContextPath>gui</Web-ContextPath>
                        <!-- Pax Web Extender knows this option -->
                        <Webapp-Context>gui</Webapp-Context>
                    </instructions>
                </configuration>
            </plugin>


            <!--
                the state of this mechanism seems to be rather broken.
                we depend on Gogo >= 0.6 for the karaf shell extension and on the aries blueprint implementation
                those fare well under felix 3.something but the profiles are off track

                it looks like creating an own profile following:
                  http://paxrunner.ops4j.org/space/Advanced+profiles+topics

                is in order. this was already done here:
                  http://blog.knowhowlab.org/2010/06/pax-runnerexam-felix-300-gogo-support.html

                however that didn't work right away, as we also do need the updated aries versions

                it might be worth asking the pax devs what's going on / what's the best approach

            <plugin>
                <groupId>org.ops4j</groupId>
                <artifactId>maven-pax-plugin</artifactId>
                <version>1.4</version>
                <configuration>
                    <runner>1.5.0</runner>
                    <framework>felix</framework>
                    <provision>
                        <param>- -log=INFO</param>
                        <param>- -shell=karaf.shell</param>
                        <param>- -profiles=gogo,compendium,core,web,war,aries.blueprint</param>
                    </provision>
                    <deployPoms>
                        ${project.basedir}/../../common/pom.xml,
                        ${project.basedir}/../../api/pom.xml,
                        ${project.basedir}/../../plugins/basic/pom.xml,
                        ${project.basedir}/../../plugins/dummy/pom.xml,
                        ${project.basedir}/../../storage/memory/pom.xml,
                        ${project.basedir}/../../workflows/dummy/pom.xml
                    </deployPoms>
                </configuration>

            </plugin>
        -->


        </plugins>

    </build>

    <dependencies>
        <dependency>
            <groupId>com.google.gwt</groupId>
            <artifactId>gwt-servlet</artifactId>
            <version>2.1.0</version>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>com.google.gwt</groupId>
            <artifactId>gwt-user</artifactId>
            <version>2.1.0</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>com.google</groupId>
            <artifactId>gwt-incubator</artifactId>
            <version>20101117-r1766</version>
            <scope>compile</scope>
        </dependency>

        <dependency>
            <groupId>eu.europeana</groupId>
            <artifactId>europeana-uim-api</artifactId>
            <version>${project.version}</version>
            <scope>compile</scope>
        </dependency>

        <dependency>
            <groupId>org.osgi</groupId>
            <artifactId>org.osgi.core</artifactId>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.osgi</groupId>
            <artifactId>org.osgi.compendium</artifactId>
            <scope>provided</scope>
        </dependency>

        <!-- Pax Web provides an (extended) implementation of the OSGI HttpService and it comes by default with Karaf -->
        <!--
        <dependency>
            <groupId>org.ops4j.pax.web</groupId>
            <artifactId>pax-web-api</artifactId>
            <- Be dead sure this is the same freaking version as the one coming with Karaf or you will
                 hear yourself curse a lot ->
            <version>0.7.3</version>
            <scope>provided</scope>
        </dependency>-->

    </dependencies>


    <repositories>
        <repository>
            <id>europeanalabs.eu</id>
            <name>europeanalabs.eu-releases</name>
            <url>http://europeanalabs.eu/artifactory/assets</url>
            <snapshots>
                <enabled>true</enabled>
            </snapshots>
        </repository>
        <!--
        <repository>
            <id>pax-runner-profiles</id>
            <url>http://scm.ops4j.org/repos/ops4j/projects/pax/runner-repository/</url>
            <snapshots>
                <enabled>true</enabled>
            </snapshots>
        </repository>
        -->
    </repositories>

    <pluginRepositories>
        <pluginRepository>
            <id>ops4j.releases</id>
            <url>http://repository.ops4j.org/maven2</url>
            <snapshots>
                <enabled>false</enabled>
            </snapshots>
        </pluginRepository>
    </pluginRepositories>

</project>
